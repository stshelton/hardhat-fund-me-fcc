{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//Pragma\npragma solidity ^0.8.9;\n\n//Imports\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//Erros\nerror FundMe__NotOwner();\n\n//intercafes, libries, contracts\n\n//Get funds from user\n//Withdraw funds\n//Set a minimum funding value\n// gas price = 832731\n\n//when adding these comments we can use solc to auto generate docs\n/** @title A contract for crowd funcing\n *  @author Spencer Shelton\n *  @notice this contact is to demo a sample funding contract\n *  @dev This implements price feeds as our library\n */\ncontract FundMe {\n    //Type declarations\n    //how to attach a library to a type\n    using PriceConverter for uint256;\n\n    //State Variables\n    //gas price before constant = 832731\n    //how do we lower gas prices\n    //constant, immutable\n    //since this is assigned during compile time\n    //gas price after constant =  812591\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // 1 * 10^18\n\n    //variables that arent init in same line but only set once we can set immutable to save gas prices\n    //21508 gas - immutable\n    //23641 gas - without immutable\n    address public i_owner;\n\n    //when people send money we wanna keep track of who sent money\n    address[] public funders;\n    //make a mapping address to find out how much money each person sent\n    mapping(address => uint256) public addressToAmountFunded;\n\n    AggregatorV3Interface public immutable priceFeed;\n\n    //Modifers\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner,  \"Sneder is not the owner!\");\n        // _; tell function to run code if passes require\n        //if u want to save more gas prices. u can create custom errors like so\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    //using constructor to set up contract when contract is created\n    //pass in block chaing address for chainlink data feeds for price of current block chain\n    constructor(address priceFeedAddress) {\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n        //in this case the sender is the person who deployed the contract\n        i_owner = msg.sender;\n    }\n\n    //what happens if someone sends this contract ETH without calling the fund function\n\n    // receive()\n    // fallback()\n\n    //now if someone sends eth without specify data (Aka using functions) this function will be called which calls are fund() function\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    //add payable if you want to be able to send money to contract\n    /**\n     *  @notice this function funds this contract\n     *  @dev This implements price feeds as our library\n     */\n    function fund() public payable {\n        //want to be able to set a minimum fund amount\n        //1. how do we send ETH to this contract\n        //msg is how u get access to the data sent with transaction(value being sent, public key ect.)\n        //msg.value is the value in native blockchain that was sent with transaction (for eth it be wei)\n        //msg.sender is the address of user that sent transaction\n\n        //if statement if user didnt send 1 eth then exit function and REVERT (undoes action and sends gas back)\n        //require(msg.value > 1e18, \"Didnt send enough\"); // 1e18 == 1 * 10 ** 18 == 1000000000000000000\n\n        //problem value is eth how do we convert it to USD, Chainlink and blockchain oracle is how you do it\n        //Problem blockchain can not access the outside world for data, if blockchain did many nodes could receive different values which would then mess up the Consensus\n        //blockchain oracle is anything that communicates with outside world, although we cant use a centralized node to get this data\n        //chainlink is the solution, a decentrialized oracle network that brings data from outside world to contracts\n        //require(getConversionRate(msg.value) >= MINIMUM_USD, \"Didnt Send enough!\");\n        //why arent we passing msg.value into parameter of getConversionRate(). Because the first parameter will be the msg.value\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didnt send enough\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    //we want to be able to withdraw\n    //right now everyone can withdraw\n    //how do we set this up so only the owner of the contract can call the withdraw function\n    function withdraw() public onlyOwner {\n        //this is how we check to see if sender is owner of contract so only owner can call contract\n        //require(msg.sender == owner, \"Sender is not owner\");\n        //lets say we need this require everywhere this is where modifier comes in\n\n        //starting index , ending index , step amount\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            //code\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //reset array parathesis how many to start array with\n        funders = new address[](0);\n        //withdraw funds 3 different ways: transfer, send, cell\n\n        // //transfer- capped at 2300 gas, if hit reverts contract\n        // //msg.sender is an address to be able to send to addres we need to typecast to payable type\n        // //address(this) gets current address of contract\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // //send - capped at 2300 gas, if hit returns a boolean\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // //use require to check success boolean from send\n        // require(sendSuccess, \"Send Failed\");\n\n        //call - lower level command, can be used to call virtually any function in all of eth. without abi\n        //doenst have a cap for gas\n        //using call is the recommonded way to send native blockcahin tokens\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//createing a library that we attach to uint256\n//libarys cant have state values or transfer ether\nlibrary PriceConverter {\n    //get eth convertion rate\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        //latest round data returns a tuple check interface below\n        (\n            ,\n            int256 price, //uint80 answeredInRound\n            ,\n            ,\n\n        ) = priceFeed.latestRoundData();\n        //currently the msg.value is to the 18th decimal while price is to the 8th\n        //so convert price to the same decimal and covert price to a uint by type casting\n        return uint256(price * 1e10); // 1**10 == 10000000000\n    }\n\n    //Example\n    //ethPrice = 3000_000000000000000000\n    //ethAmount = 1_000000000000000000\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        //need to devide by 1e18 because without it decimal will be to the 36 place\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n\n//pretty sure this is a protocol\n//theres a better way then copy and pasting interfaces\n// We could import the file or we could import it directly from github\n// interface AggregatorV3Interface {\n//   function decimals() external view returns (uint8);\n\n//   function description() external view returns (string memory);\n\n//   function version() external view returns (uint256);\n\n//   function getRoundData(uint80 _roundId)\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n\n//   function latestRoundData()\n//     external\n//     view\n//     returns (\n//       uint80 roundId,\n//       int256 answer,\n//       uint256 startedAt,\n//       uint256 updatedAt,\n//       uint80 answeredInRound\n//     );\n// }\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}